@page "/Ingsearch"
@inject HttpClient Http

@using Blazored.Typeahead;

@inject ILoggerFactory LoggerFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div>
    Ingredient: <input type="text" @oninput="filtering" @bind="@IngFilter" class="text_input dropdown" />
    <div class="dropdown-content">
        @if (IngredientList == null)
        { }
        else
        {
            @foreach (var Ingredient in IngredientList)
            {
                <input type="button"
                       style="background-color:@Ingredient.Colors;"
                       value="@Ingredient.Ingredients"
                       @onclick="(e => selectIngredient(Ingredient.Ingredients))"/>
            }
        }
    </div>
</div>
<div>
    <p></p>
</div>

@code {

    [Parameter]
    public string IngFilter { get; set; }

    private List<Models.IngredientColList.IngWcolClass> IngredientList;

    private void filtering(ChangeEventArgs IngInput)
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        //Models.IngredientList GetingredientList = new();

        if (IngInput.Value.ToString() == null || IngInput.Value.ToString() == "")
        {
            LocalStorage.RemoveItemAsync("Ing");
        }

        Models.IngredientColList GetingredientList = new();

        IngredientList = GetingredientList.GetIngredients();

        string StringInput = IngInput.Value.ToString().ToLower();

        string fixedsearch = "";

        if (StringInput.Length >= 1)
        {
            fixedsearch = char.ToUpper(StringInput[0]) + StringInput.Substring(1);
        }
        else
        {
            fixedsearch = StringInput;
        }

        if (IngInput.Value.ToString() == "")
        {
            IngredientList = null;
        }
        else
        {
            for (int Ingredientindex = IngredientList.Count - 1; Ingredientindex >= 0; --Ingredientindex)
            {
                if (IngredientList[Ingredientindex].Ingredients.Contains(fixedsearch))
                { }
                else
                {
                    IngredientList.RemoveAt(Ingredientindex);
                }
            }
        }


    }

    public string selectIngredient(string Ingredient)
    {
        var logger = LoggerFactory.CreateLogger<Ingsearch>();

        logger.LogDebug("(Ingsearch)Ingredient: " + Ingredient);

        IngFilter = Ingredient;

        LocalStorage.SetItemAsync("Ing", IngFilter);

        return Ingredient;
    }

}
