@page "/fetchdata"
@inject HttpClient Http

@using Microsoft.Extensions.Logging;
@inject ILoggerFactory LoggerFactory

<h1>Drink Search</h1>

<p>This component demonstrates fetching data from the server.</p>

<form>
    <p>
        Title: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
    </p>
</form>

@if (Tobj == null)
{
    <p><em>Loading...</em></p>
}
else

{
    @*<h3>@Tobj.drinks[0].strDrink</h3>*@
    <table class="table">
        <thead>
            <tr>
                <th>strDrink</th>
                <th>strInstructions</th>
            </tr>
        </thead>
        <tbody>
    @foreach (var drink in Tobj.drinks)
        {
            <tr>
                <td>@drink.strDrink</td>
                <td>@drink.strInstructions</td>
            </tr>
        }

    </tbody>
    </table>
}

@code {

    private Models.Root Tobj;

    public string SearchString;

    protected override async Task OnInitializedAsync()
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        logger.LogDebug("On Initialized Async");

        Controllers.DrinksAPIController controller = new();

        Tobj = await controller.Testtask(SearchString);

        logger.LogDebug("Getting Object: " + Tobj.drinks[0].strDrink );
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    var logger = LoggerFactory.CreateLogger<FetchData>();

    //    logger.LogDebug("Getting api");

    //    swaggerClient client = new("https://www.thecocktaildb.com/api/json/v1/1/", Http);

    //    logger.LogDebug("Getting search: ", typeof(BlazorWasm.Root));

    //    //searchedDrinks = await client.GetDrinkAsync("margarita");

    //    logger.LogCritical("Testing Error Logging");

    //    //BlazorWasm.Middleware.DrinkapiMiddleware inputvar = null;

    //    testvariable = "Teststring";

    //    Tobj.Teststr = testvariable;

    //    logger.LogDebug("Testing String: ", testvariable);
    //}


}