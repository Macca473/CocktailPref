@page "/fetchdata"
@inject HttpClient Http


@using Microsoft.Extensions.Logging;
@using Blazored.Typeahead;
@*@using AutoCompleteBlazor.Data;
    @using AutoCompleteBlazor.Services;*@


@inject ILoggerFactory LoggerFactory

<h1>Drink Search</h1>

<p>This component demonstrates fetching data from the server.</p>
<div class="container-fluid">
    <form>
        <div class="row">
            <div class="col-sm-3">
                Drink: <input type="text" @bind="SearchString" />
            </div>
            <div class="col-sm-3 dropdown">
                <Ingsearch/>
                @*Ingredient: <input type="text" @oninput="filtering" @bind="IngFilter" class="dropbtn" />*@
                @*<div class="dropdown-content">
                    @if (IngredientList == null)
                    { }
                    else
                    {
                        @foreach (var Ingredient in IngredientList)
                        {
                            <input type="button" style="background-color:@Ingredient.Colors;" value="@Ingredient.Ingredients" @onclick="(e => selectIngredient(Ingredient.Ingredients))" />
                        }
                    }
                </div>*@
            </div>
            <div class="col-sm-3">
                <input type="checkbox" value="Alcoholic?" @bind="AlcoholicBool" />
            </div>
            <div class="col-sm-3">
                <input type="button" value="Filter" @onclick="UpdateSearch" />
            </div>

        </div>
    </form>
</div>

<div class="container-fluid">
    <div class="row">
        @if (Tobj == null)
        {
            <p><em>Loading...</em></p>
        }


        else if (Tobj.drinks == null)
        {
            <p><em>What is '@SearchString'?</em></p>

        }
        else

        {
            @for (int drink = 0; drink < Tobj.drinks.Count; drink++)
            {
                <div class="col-sm-3 drinkbox">
                    <DrinkView drink="Tobj.drinks[drink]"/>
                </div>
            }

        }
    </div>
</div>
   


    @code {

        public Models.Root Tobj;

        public string SearchString;

        [Parameter]
        public string IngFilter { get; set; }

        public bool AlcoholicBool;

        private List<Models.IngredientColList.IngWcolClass> IngredientList;

        protected async Task UpdateSearch()
        {
            var logger = LoggerFactory.CreateLogger<FetchData>();

            logger.LogDebug("UpdateSearch: " + SearchString);

            Controllers.DrinksAPIController controller = new();

            Pages.Ingsearch ingsearch = new();

            //IngFilter = ingsearch.Inginp.ToString();

            logger.LogDebug("IngFilter raw: " + ingsearch.Inginp.ToString());

            logger.LogDebug("IngFilter: " + IngFilter);

            Tobj = await controller.SearchControllor(SearchString, IngFilter, AlcoholicBool);

            logger.LogDebug("Getting Object");
        }

        //private void filtering(ChangeEventArgs IngInput)
        //{
        //    var logger = LoggerFactory.CreateLogger<FetchData>();

        //    //Models.IngredientList GetingredientList = new();

        //    Models.IngredientColList GetingredientList = new();

        //    IngredientList = GetingredientList.GetIngredients();

        //    string StringInput = IngInput.Value.ToString().ToLower();

        //    string fixedsearch = "";

        //    if (StringInput.Length >= 2)
        //    {
        //        fixedsearch = char.ToUpper(StringInput[0]) + StringInput.Substring(1);
        //    }
        //    else
        //    {
        //        fixedsearch = StringInput;
        //    }

        //    if (IngInput.Value.ToString() == "")
        //    {
        //        IngredientList = null;
        //    }
        //    else
        //    {
        //        for (int Ingredientindex = IngredientList.Count - 1; Ingredientindex >= 0; --Ingredientindex)
        //        {
        //            if (IngredientList[Ingredientindex].Ingredients.Contains(fixedsearch))
        //            { }
        //            else
        //            {
        //                IngredientList.RemoveAt(Ingredientindex);
        //            }
        //        }
        //    }
        //}

        //protected void selectIngredient(string Ingredient)
        //{
        //    var logger = LoggerFactory.CreateLogger<FetchData>();

        //    logger.LogDebug("Ingredient: " + Ingredient);

        //    IngFilter = Ingredient;
        //}
    }
