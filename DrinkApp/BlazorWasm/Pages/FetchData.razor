@page "/fetchdata"
@inject HttpClient Http

@using Microsoft.Extensions.Logging;
@inject ILoggerFactory LoggerFactory

<h1>Drink Search</h1>

<p>This component demonstrates fetching data from the server.</p>

<form>
    <p>
        Title: <input type="text" @bind="SearchString" />
        <input type="button" value="Filter" @onclick="UpdateSearch" />
    </p>
</form>

@if (Tobj == null)
{
    <p><em>Loading...</em></p>
}

else if (Tobj.drinks == null)
{
    <p><em>What is '@SearchString'?</em></p>
}
else

{
    @*<h3>@Tobj.drinks[0].strDrink</h3>*@
    <table class="table">
        <thead>
            <tr>
                <th>strDrink</th>
                <th>strInstructions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var drink in Tobj.drinks)
            {
                <tr>
                    <td>@drink.strDrink</td>
                    <td>@drink.strInstructions</td>
                </tr>
            }

        </tbody>
    </table>
}

@code {

    private Models.Root Tobj;

    public string SearchString;

    //protected override async Task OnInitializedAsync()
    //{
    //    var logger = LoggerFactory.CreateLogger<FetchData>();

    //    logger.LogDebug("On Initialized Async");

    //    Controllers.DrinksAPIController controller = new();

    //    Tobj = await controller.Testtask(SearchString);

    //    logger.LogDebug("Getting Object");
    //}

    protected async Task UpdateSearch()
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        logger.LogDebug("UpdateSearch: " + SearchString);

        Controllers.DrinksAPIController controller = new();

        Tobj = await controller.Testtask(SearchString);

        logger.LogDebug("Getting Object");
    }

}

