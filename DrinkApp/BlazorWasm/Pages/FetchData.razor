@page "/fetchdata"
@inject HttpClient Http


@using Microsoft.Extensions.Logging;
@using Blazored.Typeahead;
@*@using AutoCompleteBlazor.Data;
    @using AutoCompleteBlazor.Services;*@


@inject ILoggerFactory LoggerFactory




<h1>Drink Search</h1>

<p>This component demonstrates fetching data from the server.</p>
<div class="container-fluid">
    <form>
        <div class="row">
            <div class="col-sm-3">
                Drink: <input type="text" @bind="SearchString" />
            </div>
            <div class="col-sm-3 dropdown">
                Ingredient: <input type="text" @oninput="filtering" @bind="IngFilter" class="dropbtn" />
                <div class="dropdown-content">
                    @if (IngredientList == null)
                    { }
                    else
                    {
                        @foreach (var Ingredient in IngredientList)
                        {
                            <input type="button" value="@Ingredient" @onclick="(e => selectIngredient(Ingredient))" />
                        }
                    }
                </div>
            </div>
            <div class="col-sm-3">
                <input type="checkbox" value="Alcoholic?" @bind="AlcoholicBool" />
            </div>
            <div class="col-sm-3">
                <input type="button" value="Filter" @onclick="UpdateSearch" />
            </div>

        </div>
    </form>
</div>

@if (Tobj == null)
{
    <p><em>Loading...</em></p>
}

else if (Tobj.drinks == null)
{
    <p><em>What is '@SearchString'?</em></p>

}
else

{
    @for (int drink = 0; drink < Tobj.drinks.Count; drink++)
    {
        <DrinkView drink="Tobj.drinks[drink]" />
    }
    
}

@code {

    public Models.Root Tobj;

    public string SearchString;

    public string IngFilter;

    public bool AlcoholicBool;

    private List<String> IngredientList;

    protected async Task UpdateSearch()
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        logger.LogDebug("UpdateSearch: " + SearchString);

        Controllers.DrinksAPIController controller = new();

        Tobj = await controller.SearchControllor(SearchString, IngFilter, AlcoholicBool);

        logger.LogDebug("Getting Object");
    }

    private void filtering(ChangeEventArgs IngInput)
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        Models.IngredientList GetingredientList = new();

        IngredientList = GetingredientList.GetIngredients();

        string StringInput = IngInput.Value.ToString().ToLower();

        string fixedsearch = "";

        if (StringInput.Length >= 2)
        {
            fixedsearch = char.ToUpper(StringInput[0]) + StringInput.Substring(1);
        }
        else
        {
            fixedsearch = StringInput;
        }

        if (IngInput.Value.ToString() == "")
        {
            IngredientList = null;
        }
        else
        {
            for (int Ingredientindex = IngredientList.Count - 1; Ingredientindex >= 0; --Ingredientindex)
            {
                if (IngredientList[Ingredientindex].Contains(fixedsearch))
                { }
                else
                {
                    IngredientList.RemoveAt(Ingredientindex);
                }
            }
        }
    }

    protected void selectIngredient(string Ingredient)
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        logger.LogDebug("Ingredient: " + Ingredient);

        IngFilter = Ingredient;
    }
}
