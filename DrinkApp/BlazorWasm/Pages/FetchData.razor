@page "/fetchdata"
@inject HttpClient Http


@using Microsoft.Extensions.Logging;
@using Blazored.Typeahead;
@*@using AutoCompleteBlazor.Data;
    @using AutoCompleteBlazor.Services;*@


@inject ILoggerFactory LoggerFactory

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="background">
    <div class="page Cpersent">
        <div class="title">
            <h1 class="Title">Drink Search</h1>
        </div>

        <div class="container">
            <form>
                <div class="row formStyle">
                    <div class="col-lg-6 textInputdiv">
                        <div>
                            Drink: <input type="text" @bind="SearchString" class="text_input" />
                        </div>
                    </div>
                    <div class="col-lg-6 textInputdiv">
                        <Ingsearch @key="IngFilter" />
                        @*Ingredient: <input type="text" @oninput="filtering" @bind="IngFilter" class="dropbtn" />*@
                        @*<div class="dropdown-content">
                    @if (IngredientList == null)
                    { }
                    else
                    {
                        @foreach (var Ingredient in IngredientList)
                        {
                            <input type="button" style="background-color:@Ingredient.Colors;" value="@Ingredient.Ingredients" @onclick="(e => selectIngredient(Ingredient.Ingredients))" />
                        }
                    }
                </div>*@
                    </div>
                </div>
                <div class="row formStyle">
                    <div class="col-lg-6 Alcoholcheck">
                        @*<div class="row Cpersent">*@
                        @*<div class="col-4">*@
                        Alcoholic?:
                        @*</div>
                <div class="col-7 checkbxBox">*@
                        <input type="checkbox" @bind="AlcoholicBool" class="checkbx" />
                        @*</div>*@
                        @*</div>*@
                    </div>

                    <div class="col-lg-6 FilterBtn">
                        <input type="button" value="Filter" @onclick="UpdateSearch" />
                    </div>

                </div>
            </form>
        </div>

        <div class="container-fluid drinkView Cpersent">
            <div class="row Cpersent">
                @if (Tobj == null)
                {
                    <p>Loading...</p>
                }


                else if (Tobj.drinks == null)
                {
                    <p><em>What is '@SearchString'?</em></p>

                }
                else

                {
                    @for (int drink = 0; drink < Tobj.drinks.Count; drink++)
                    {
                        <div class="col-sm-3 drinksbox">
                            <div class="SmallDV">
                                <DrinkView drink="Tobj.drinks[drink]"  />
                            </div>

                            <div class="LargeDV">
                                <BiggerDrinkView drink="Tobj.drinks[drink]"  /> 
                            </div>
                        </div>
                    }

                }
            </div>
        </div>
    </div>
</div>


@code {

    public Models.Root Tobj;

    public string SearchString;

    //[Parameter]
    //public string IngFilter { get; set; }

    public string IngFilter;

    public bool AlcoholicBool;

    private List<Models.IngredientColList.IngWcolClass> IngredientList;

    protected async Task UpdateSearch()
    {
        var logger = LoggerFactory.CreateLogger<FetchData>();

        logger.LogDebug("UpdateSearch: " + SearchString);

        Controllers.DrinksAPIController controller = new();

        IngFilter = await LocalStorage.GetItemAsync<string>("Ing");

        Tobj = await controller.SearchControllor(SearchString, IngFilter, AlcoholicBool);

        logger.LogDebug("Getting Object");
    }

    //private void filtering(ChangeEventArgs IngInput)
    //{
    //    var logger = LoggerFactory.CreateLogger<FetchData>();

    //    //Models.IngredientList GetingredientList = new();

    //    Models.IngredientColList GetingredientList = new();

    //    IngredientList = GetingredientList.GetIngredients();

    //    string StringInput = IngInput.Value.ToString().ToLower();

    //    string fixedsearch = "";

    //    if (StringInput.Length >= 2)
    //    {
    //        fixedsearch = char.ToUpper(StringInput[0]) + StringInput.Substring(1);
    //    }
    //    else
    //    {
    //        fixedsearch = StringInput;
    //    }

    //    if (IngInput.Value.ToString() == "")
    //    {
    //        IngredientList = null;
    //    }
    //    else
    //    {
    //        for (int Ingredientindex = IngredientList.Count - 1; Ingredientindex >= 0; --Ingredientindex)
    //        {
    //            if (IngredientList[Ingredientindex].Ingredients.Contains(fixedsearch))
    //            { }
    //            else
    //            {
    //                IngredientList.RemoveAt(Ingredientindex);
    //            }
    //        }
    //    }
    //}

    //protected void selectIngredient(string Ingredient)
    //{
    //    var logger = LoggerFactory.CreateLogger<FetchData>();

    //    logger.LogDebug("Ingredient: " + Ingredient);

    //    IngFilter = Ingredient;
    //}
}
